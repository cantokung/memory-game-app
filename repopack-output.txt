================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-12T07:40:03.464Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    Card.jsx
    CardTest.jsx
    CharacterImageValidator.jsx
    CharacterList.jsx
    DebugInfo.jsx
    GameBoard.jsx
    GameOver.jsx
    Header.jsx
    Scoreboard.jsx
  constants/
    gameConfig.js
  hooks/
    useCharacters.js
  styles/
    App.css
    Card.css
    CardTest.css
    GameBoard.css
    GameOver.css
    Header.css
    Scoreboard.css
  utils/
    api.js
    gameCharacters.js
    helper.js
  App.css
  App.jsx
  index.css
  main.jsx
.eslintrc.cjs
.gitignore
index.html
package.json
README.md
vite.config.js

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/Card.jsx
================
// src/components/Card.jsx
import React from 'react';
import '../styles/Card.css';

const Card = ({ character, onClick }) => {
  return (
    <div className="card" onClick={() => onClick(character)}>
      <div className="card-inner">
        <img src={character.image} alt={character.name} className="card-image" />
        <div className="card-name">{character.name}</div>
      </div>
    </div>
  );
};

export default Card;

================
File: src/components/CardTest.jsx
================
// src/components/CardTest.jsx

import React, { useState, useEffect } from 'react';
import Card from './Card';
import DebugInfo from './DebugInfo';
import { fetchAllCharacters, getTopCharacters } from '../utils/api.js';
import '../styles/CardTest.css';

const CardTest = () => {
  const [characters, setCharacters] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showDebug, setShowDebug] = useState(false);

  useEffect(() => {
    const loadCharacters = async () => {
      setLoading(true);
      const allCharacters = await fetchAllCharacters();
      const topCharacters = await getTopCharacters(allCharacters, 50);
      setCharacters(topCharacters);
      setLoading(false);
    };
    loadCharacters();
  }, []);

  const handleCardClick = (character) => {
    console.log('Clicked character:', character.name);
    // Here you can add logic for the memory game
  };

  if (loading) {
    return <div>Loading characters... This may take a moment.</div>;
  }

  return (
    <div className="card-test-container">
      <h1>Top {characters.length} Rick and Morty Characters</h1>
      <button onClick={() => setShowDebug(!showDebug)}>
        {showDebug ? 'Hide' : 'Show'} Debug Info
      </button>
      {showDebug && <DebugInfo characters={characters} />}
      <div className="card-grid">
        {characters.map((character) => (
          <Card key={character.id} character={character} onClick={handleCardClick} />
        ))}
      </div>
    </div>
  );
};

export default CardTest;

================
File: src/components/CharacterImageValidator.jsx
================
// src/components/CharacterImageValidator.jsx

import React, { useState, useEffect } from 'react';

const BASE_URL = 'https://rickandmortyapi.com/api/character';

const topCharacters = [
  "Rick Sanchez", "Morty Smith", "Summer Smith", "Beth Smith", "Jerry Smith",
  "Mr. Poopybutthole", "Birdperson", "Squanchy", "Mr. Meeseeks", "Evil Morty",
  "Scary Terry", "Unity", "Snuffles (Snowball)", "Krombopulos Michael",
  "Abradolf Lincler", "Pickle Rick", "Tiny Rick", "Jaguar", "Noob-Noob",
  "Phoenixperson", "Tammy Guetermann", "Jessica", "Mr. Goldenfold",
  "Principal Vagina", "Gear Head", "Revolio Clockberg Jr.", "Cousin Nicky",
  "Scroopy Noopers", "King Jellybean", "Gazorpazorpfield", "Arthricia",
  "Zeep Xanflorp", "Ice-T", "Cromulons", "Fart", "Roy", "Mr. Needful",
  "Hemorrhage", "Morty Jr.", "Ants in my Eyes Johnson", "Plumbuses",
  "Ghost in a Jar", "Slow Mobius", "Shleemypants", "Glootie", "Mr. Nimbus",
  "Space Beth", "Planetina", "Naruto Smith", "Million Ants", "Supernova",
  "Alan Rails", "Vance Maximus", "Crocubot", "Worldender", "Cornvelious Daniel",
  "Concerto", "Risotto Groupon", "Simple Rick", "Toxic Rick", "Toxic Morty",
  "Froopyland Clone Tommy", "Kiara", "Dr. Wong", "Heistotron", "Randotron",
  "Story Lord", "Tickets Please Guy", "Gaia", "Gotron", "Two Crows"
];

const CharacterImageValidator = () => {
  const [validCharacters, setValidCharacters] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const validateCharacters = async () => {
      const validChars = [];
      for (const name of topCharacters) {
        try {
          const response = await fetch(`${BASE_URL}/?name=${encodeURIComponent(name)}`);
          const data = await response.json();
          if (data.results && data.results.length > 0) {
            const char = data.results[0];
            const imgResponse = await fetch(char.image);
            if (imgResponse.ok) {
              validChars.push(char);
            }
          }
        } catch (error) {
          console.error(`Error validating ${name}:`, error);
        }
        if (validChars.length >= 50) break;
      }
      setValidCharacters(validChars);
      setLoading(false);
    };

    validateCharacters();
  }, []);

  if (loading) {
    return <div>Validating character images...</div>;
  }

  return (
    <div>
      <h2>Top 50 Rick and Morty Characters with Valid Images</h2>
      <ul>
        {validCharacters.map(char => (
          <li key={char.id}>
            {char.name}
            <img src={char.image} alt={char.name} style={{width: '50px', height: '50px'}} />
          </li>
        ))}
      </ul>
    </div>
  );
};

export default CharacterImageValidator;

================
File: src/components/CharacterList.jsx
================
// src/components/CharacterList.jsx

import React, { useState, useEffect } from 'react';

const BASE_URL = 'https://rickandmortyapi.com/api/character';

const CharacterList = () => {
  const [characters, setCharacters] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAllCharacters = async () => {
      let allCharacters = [];
      let nextPage = BASE_URL;

      while (nextPage) {
        const response = await fetch(nextPage);
        const data = await response.json();
        allCharacters = [...allCharacters, ...data.results];
        nextPage = data.info.next;
      }

      setCharacters(allCharacters);
      setLoading(false);
    };

    fetchAllCharacters();
  }, []);

  if (loading) {
    return <div>Loading characters...</div>;
  }

  return (
    <div>
      <h2>All Rick and Morty Characters</h2>
      <ul>
        {characters.map(character => (
          <li key={character.id}>{character.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default CharacterList;

================
File: src/components/DebugInfo.jsx
================
// src/components/DebugInfo.jsx

import React from 'react';

const DebugInfo = ({ characters }) => {
  return (
    <div className="debug-info">
      <h2>Debug Information</h2>
      <p>Total characters loaded: {characters.length}</p>
      <h3>Character Details:</h3>
      <ul>
        {characters.map((character) => (
          <li key={character.id}>
            {character.name} - Episodes: {character.episode.length}, Image: {character.image}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default DebugInfo;

================
File: src/components/GameBoard.jsx
================
// src/components/GameBoard.jsx
import React from 'react';
import Card from './Card';
import '../styles/GameBoard.css';

const GameBoard = ({ characters, onCardClick }) => {
  return (
    <div className="game-board">
      {characters.map((character) => (
        <Card
          key={character.id}
          character={character}
          onClick={() => onCardClick(character)}
        />
      ))}
    </div>
  );
};

export default GameBoard;

================
File: src/components/GameOver.jsx
================
// src/components/GameOver.jsx
import React from 'react';
import '../styles/GameOver.css';

const GameOver = ({ score, onRestart, isWin }) => {
  return (
    <div className="game-over">
      <h2>{isWin ? "You Win!" : "Game Over"}</h2>
      <p>Your score: {score}</p>
      {isWin && <p>Congratulations! You've matched all the characters!</p>}
      <button onClick={onRestart}>Play Again</button>
    </div>
  );
};

export default GameOver;

================
File: src/components/Header.jsx
================
// src/components/Header.jsx
import React from 'react';
import '../styles/Header.css';

const Header = ({ difficulty, onDifficultyChange }) => {
  return (
    <header className="header">
      <h1>Rick and Morty Memory Game</h1>
      <div className="difficulty-selector">
        <label htmlFor="difficulty">Difficulty:</label>
        <select
          id="difficulty"
          value={difficulty}
          onChange={(e) => onDifficultyChange(e.target.value)}
        >
          <option value="easy">Easy</option>
          <option value="medium">Medium</option>
          <option value="hard">Hard</option>
          <option value="hardcore">Hardcore</option>
        </select>
      </div>
    </header>
  );
};

export default Header;

================
File: src/components/Scoreboard.jsx
================
// src/components/Scoreboard.jsx
import React from 'react';
import '../styles/Scoreboard.css';

const Scoreboard = ({ score, bestScore }) => {
  return (
    <div className="scoreboard">
      <div className="score">
        <span>Score:</span>
        <span>{score}</span>
      </div>
      <div className="best-score">
        <span>Best:</span>
        <span>{bestScore}</span>
      </div>
    </div>
  );
};

export default Scoreboard;

================
File: src/constants/gameConfig.js
================
// src/constants/gameConfig.js

export const NUMBER_OF_CHARACTERS = 50; // You can adjust this number as needed

================
File: src/styles/Card.css
================
/* src/styles/Card.css */
.card {
  width: 100%;
  aspect-ratio: 1 / 1; /* This ensures the card remains square */
  max-width: 250px;
  margin: 0 auto;
}

.card-inner {
  position: relative;
  width: 100%;
  height: 100%;
}

.card-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.card-name {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.7);
  color: #fff;
  padding: 0.5rem;
  font-size: 0.9rem;
  text-align: center;
}

================
File: src/styles/GameBoard.css
================
/* src/styles/GameBoard.css */
.game-board {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    padding: 1rem;
    width: 100%;
  }
  
  @media (min-width: 576px) {
    .game-board {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 768px) {
    .game-board {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  @media (min-width: 992px) {
    .game-board {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  
  @media (min-width: 1200px) {
    .game-board {
      grid-template-columns: repeat(5, 1fr);
    }
  }

================
File: src/styles/GameOver.css
================
/* src/styles/GameOver.css */
.game-over {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.8);
    color: #fff;
    z-index: 100;
  }
  
  .game-over h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }
  
  .game-over p {
    font-size: 1.2rem;
    margin-bottom: 1rem;
  }
  
  .game-over button {
    background-color: #97ce4c;
    color: #fff;
    border: none;
    padding: 0.8rem 1.5rem;
    font-size: 1.2rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .game-over button:hover {
    background-color: #86b842;
  }

================
File: src/styles/Header.css
================
/* src/styles/Header.css */
.header {
    background-color: #97ce4c;
    color: #fff;
    padding: 1rem;
    text-align: center;
  }
  
  .header h1 {
    margin: 0 0 1rem;
    font-size: 2rem;
  }
  
  .difficulty-selector {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
  }
  
  .difficulty-selector select {
    padding: 0.5rem;
    font-size: 1rem;
    border: none;
    border-radius: 4px;
    background-color: #fff;
    color: #333;
  }
  
  @media (min-width: 768px) {
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
  
    .header h1 {
      margin: 0;
    }
  }

================
File: src/styles/Scoreboard.css
================
/* src/styles/Scoreboard.css */
.scoreboard {
    display: flex;
    justify-content: space-around;
    background-color: #44281d;
    color: #fff;
    padding: 1rem;
    font-size: 1.2rem;
  }
  
  .score, .best-score {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .score span:first-child, .best-score span:first-child {
    font-size: 0.9rem;
    opacity: 0.8;
  }
  
  @media (min-width: 768px) {
    .scoreboard {
      justify-content: center;
      gap: 2rem;
    }
  
    .score, .best-score {
      flex-direction: row;
      gap: 0.5rem;
    }
  }

================
File: src/utils/api.js
================
// src/utils/api.js

const BASE_URL = 'https://rickandmortyapi.com/api/character';

// Helper function to delay execution
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Fetch all characters
export const fetchAllCharacters = async () => {
  let allCharacters = [];
  let nextPage = `${BASE_URL}`;

  try {
    while (nextPage) {
      const response = await fetch(nextPage);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      allCharacters = [...allCharacters, ...data.results];
      nextPage = data.info.next;
      // Add a small delay between page requests
      await delay(300);
    }
    return allCharacters;
  } catch (error) {
    console.error('Error fetching characters:', error);
    return [];
  }
};

// Validate image URL
const validateImageUrl = async (url) => {
  try {
    const response = await fetch(url, { method: 'HEAD' });
    return response.ok;
  } catch {
    return false;
  }
};

// Filter and get top characters
export const getTopCharacters = async (characters, n) => {
  const validCharacters = [];
  
  for (const character of characters) {
    const isValid = await validateImageUrl(character.image);
    if (isValid) {
      validCharacters.push(character);
    }
    if (validCharacters.length >= n) break;
    // Add a small delay between image validations
    await delay(100);
  }

  return validCharacters
    .sort((a, b) => b.episode.length - a.episode.length)
    .slice(0, n);
};


export const fetchCharacterByName = async (name) => {
  try {
    const response = await fetch(`${BASE_URL}/?name=${encodeURIComponent(name)}`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    return data.results && data.results.length > 0 ? data.results[0] : null;
  } catch (error) {
    console.error(`Error fetching character ${name}:`, error);
    return null;
  }
};

================
File: src/utils/gameCharacters.js
================
// src/utils/gameCharacters.js

export const GAME_CHARACTERS = [
    "Rick Sanchez", "Morty Smith", "Summer Smith", "Beth Smith", "Jerry Smith",
    "Mr. Poopybutthole", "Birdperson", "Squanchy", "Mr. Meeseeks", "Evil Morty",
    "Scary Terry", "Unity", "Snuffles (Snowball)", "Krombopulos Michael",
    "Abradolf Lincler", "Pickle Rick", "Tiny Rick", "Jaguar", "Noob-Noob",
    "Phoenixperson", "Tammy Guetermann", "Jessica", "Mr. Goldenfold",
    "Principal Vagina", "Revolio Clockberg Jr.", "Cousin Nicky", "Scroopy Noopers",
    "King Jellybean", "Gazorpazorpfield", "Arthricia", "Zeep Xanflorp", "Ice-T",
    "Fart", "Conroy", "Mr. Needful", "Hemorrhage", "Morty Jr.",
    "Ants in my Eyes Johnson", "Ghost in a Jar", "Slow Mobius", "Shleemypants",
    "Glootie", "Mr. Nimbus", "Planetina", "Naruto Smith", "Million Ants",
    "Supernova", "Alan Rails", "Vance Maximus", "Crocubot"
  ];
  
  // Fisher-Yates shuffle algorithm
  const shuffleArray = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  };
  
  export const getGameCharacters = (difficulty) => {
    let numberOfCharacters;
    switch (difficulty) {
      case 'easy':
        numberOfCharacters = 6;
        break;
      case 'medium':
        numberOfCharacters = 10;
        break;
      case 'hard':
        numberOfCharacters = 15;
        break;
      case 'hardcore':
        numberOfCharacters = 20;
        break;
      default:
        numberOfCharacters = 10; // Default to medium if an invalid difficulty is provided
    }
  
    // Shuffle the array and select the first `numberOfCharacters`
    return shuffleArray([...GAME_CHARACTERS]).slice(0, numberOfCharacters);
  };

================
File: src/utils/helper.js
================
export const shuffleArray = (array) => {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
  };

================
File: src/App.css
================
/* src/App.css */
.App {
  width: 100%;
  max-width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.game-container {
  width: 100%;
  max-width: 1200px; /* Add this line to limit the maximum width */
  margin: 0 auto; /* Center the container */
  padding: 1rem;
  box-sizing: border-box;
}

@media (min-width: 768px) {
  .App {
    padding: 2rem;
  }
}

@media (min-width: 1200px) {
  .game-container {
    padding: 0 2rem;
  }
}

.App {
  width: 100%;
  max-width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.game-container {
  width: 100%;
  padding: 1rem;
  box-sizing: border-box;
}
/* Remove the media query for 1600px as we want it to be fully responsive */

================
File: src/App.jsx
================
// src/App.jsx
import React, { useState, useEffect } from 'react';
import Header from './components/Header';
import GameBoard from './components/GameBoard';
import Scoreboard from './components/Scoreboard';
import GameOver from './components/GameOver';
import { fetchCharacterByName } from './utils/api';
import { getGameCharacters } from './utils/gameCharacters';
import { shuffleArray } from './utils/helper';
import './App.css';



function App() {
  const [difficulty, setDifficulty] = useState('medium');
  const [characters, setCharacters] = useState([]);
  const [clickedCharacters, setClickedCharacters] = useState([]);
  const [score, setScore] = useState(0);
  const [bestScore, setBestScore] = useState(0);
  const [loading, setLoading] = useState(true);
  const [gameOver, setGameOver] = useState(false);

  useEffect(() => {
    resetGame();
  }, [difficulty]);

  const resetGame = async () => {
    setLoading(true);
    setGameOver(false);
    setScore(0);
    setClickedCharacters([]);
    try {
      const selectedCharacters = getGameCharacters(difficulty);
      const fetchedCharacters = await Promise.all(
        selectedCharacters.map(name => fetchCharacterByName(name))
      );
      setCharacters(shuffleArray(fetchedCharacters.filter(char => char !== null)));
    } catch (error) {
      console.error("Error fetching characters:", error);
      setCharacters([]);
    } finally {
      setLoading(false);
    }
  };

  const handleCardClick = (character) => {
    if (clickedCharacters.includes(character.id)) {
      endGame();
    } else {
      const newScore = score + 1;
      setScore(newScore);
      if (newScore > bestScore) {
        setBestScore(newScore);
      }
      setClickedCharacters([...clickedCharacters, character.id]);
      setCharacters(shuffleArray([...characters]));
      
      if (newScore === characters.length) {
        endGame(true);
      }
    }
  };

  const endGame = (win = false) => {
    setGameOver(true);
    if (win) {
      console.log("Congratulations! You've won!");
    } else {
      console.log("Game Over!");
    }
  };

  const handleDifficultyChange = (newDifficulty) => {
    setDifficulty(newDifficulty);
  };

  if (loading) {
    return <div>Loading characters...</div>;
  }

  return (
    <div className="App" style={{ width: '100%', maxWidth: '100%' }}>
      <Header difficulty={difficulty} onDifficultyChange={handleDifficultyChange} />
      <Scoreboard score={score} bestScore={bestScore} />
      <main className="game-container">
        {loading ? (
          <div className="loading">Loading characters...</div>
        ) : gameOver ? (
          <GameOver 
            score={score} 
            onRestart={resetGame} 
            isWin={score === characters.length}
          />
        ) : (
          <GameBoard characters={characters} onCardClick={handleCardClick} />
        )}
      </main>
    </div>
  );
}

export default App;

================
File: src/index.css
================
html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

#root {
  width: 100%;
  height: 100%;
}

================
File: src/main.jsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

================
File: .eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Rick and Morty Memory Game</title>
  </head>
  <body>
    <div id="root" style="width: 100%; height: 100%;"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "memory-game-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.3",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.4"
  }
}

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
